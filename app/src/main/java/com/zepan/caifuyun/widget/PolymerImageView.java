package com.zepan.caifuyun.widget;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import android.content.Context;import android.net.Uri;import android.text.TextUtils;import android.util.AttributeSet;import android.util.Log;import android.view.View;import android.widget.FrameLayout;import com.facebook.drawee.view.SimpleDraweeView;import com.zepan.android.util.StringUtil;/** * 头像聚合，头像来自网络，使用时调用{@link #setImageList(List)} * */public class PolymerImageView extends FrameLayout {	/** 图片列表 */	private List<String> imageList = new ArrayList<String>();	/** 显示的最大图片数，通常是一个自然数的平方，建议不大于9 */	private static final int MAX_IMAGE_COUNT = 9;	public PolymerImageView(Context context, AttributeSet attrs) {		super(context, attrs);	}	/** 设置图片列表 */	public void setImageList(List<String> imageList) {		if(imageList == null || imageList.size() == 0){			return;		}		this.imageList.clear();		for(int i = 0;i < imageList.size();i++){			if(!TextUtils.isEmpty(imageList.get(i)) && imageList.get(i).startsWith("http")){				this.imageList.add(imageList.get(i));			}		}		createView(getRowCount(this.imageList.size()));	}	/** 设置图片列表 */	public void setImageList(String[] imageArray) {		setImageList(Arrays.asList(imageArray));	}	// ===================================选择布局⬇️=====================================	/**	 * 根据横向单元格数目绘制单元格	 * 	 * @param rowCount	 *            单元格数目	 * */	private void createView(int rowCount) {		// 删除所有的子控件		this.removeAllViews();		Log.i("======", getChildCount() + "");		if(rowCount == 0){			return;		}		// 取单元格的尺寸		int cellWidth = getLayoutParams().width / rowCount;		// 单元格高宽相同		int cellHeight = cellWidth;		// 获取整除rowCount后单元格（以下称剩下的单元格）的数目，这些单元格要居中		int remainCellCount = imageList.size() % rowCount;		// 获取当前控件中单元格的行数		int cellRowCount = imageList.size() / rowCount;		if (remainCellCount != 0) {			cellRowCount += 1;		}		// 获取最上层单元格的topmargin		int firstTopMargin = (getLayoutParams().height - cellRowCount * cellHeight) / 2;		// 获取最上层最左边单元格的topmargin		int firstLeftMargin = (getLayoutParams().height - remainCellCount * cellWidth) / 2;		// 遍历图片数组，绘制imageview到当前控件上		for (int i = 0; i < imageList.size(); i++) {			LayoutParams params = new LayoutParams(					cellWidth, cellHeight);			// 先将剩下的单元格显示			if (i < remainCellCount) {				params.topMargin = firstTopMargin;				params.leftMargin = firstLeftMargin + i * cellWidth;			} else {				if (remainCellCount == 0) {					params.topMargin = firstTopMargin + (i / rowCount)							* cellHeight;				} else {					params.topMargin = firstTopMargin + ((i - remainCellCount) / rowCount + 1)							* cellHeight;				}				params.leftMargin = ((i - remainCellCount) % rowCount)						* cellHeight;			}			SimpleDraweeView imageView = new SimpleDraweeView(getContext());			if(!TextUtils.isEmpty(this.imageList.get(i)) && this.imageList.get(i).startsWith("http")){				imageView.setImageURI(Uri.parse(this.imageList.get(i)));				addView(imageView, params);			}		}	}	// ===================================选择布局⬆️️=====================================	/**	 * 获取横向单元格数目，计算方式如下： 如果一个数在区间[n-1平方 + 1，n平方]中，则返回n	 * 	 * @param number	 *            给定的数	 * */	public int getRowCount(int number) {		int maxSqrt = (int) Math.sqrt(MAX_IMAGE_COUNT);		for (int i = maxSqrt; i >= 1; i--) {			if (number > Math.pow(i - 1, 2) && number <= Math.pow(i, 2)) {				return i;			}		}		return 0;	}}