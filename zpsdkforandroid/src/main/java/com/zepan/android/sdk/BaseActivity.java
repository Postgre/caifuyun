package com.zepan.android.sdk;import android.content.Context;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.View;import android.view.Window;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.zepan.android.sdk.cache.UserDBManager;import com.zepan.android.sdk.entity.User;/** * 自定义的Activity,所以Activity的基类。 * */public class BaseActivity extends ActionBarActivity {		/**	 * 类的标签，用于打印日志或者网络请求中	 * */	protected final String TAG = "########" + getClass().getSimpleName() + "########";	/**	 * 用户Sqlite	 * */	protected UserDBManager mUserDb;		/**	 * onCreate方法中定义activity的默认样式	 * */	@Override	protected void onCreate(Bundle savedInstanceState) {		// 去掉标题		requestWindowFeature(Window.FEATURE_NO_TITLE);		mUserDb = new UserDBManager(this);		super.onCreate(savedInstanceState);	}		/**	 * 初始化activity后，成员属性实例化	 * */	@Override	protected void onPostCreate(Bundle savedInstanceState) {		super.onPostCreate(savedInstanceState);	}	/**	 * 决定当前是否是debug状态，如果是返回是true，将进入调试状态：	 * 1､显示所有返回值。	 * 2、Log打印日志。	 * 默认是debug状态。	 * */	protected boolean isDebug(){		return true;	}	/**	 * 打印日志。	 * @param message 要显示的信息。	 * */	protected void printLog(String message){		Log.i(TAG, message);	}		/**	 * 错误提示	 * @param message 要显示的信息。	 * */	protected void processError(String message){		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();	}		/**	 * 设置顶部文字显示，顺序为［文字左，文字中，文字右，图片左，图片中，图片右］，不显示可传入0	 * @param headFieldIds显示内空的资源id	 * */	protected void setHeaderFields(int... headFieldIds) {		final int fieldIds[] = { R.id.tv_left, R.id.tv_center, R.id.tv_right,				R.id.iv_left, R.id.iv_center, R.id.iv_right };		for (int i = 0; i < headFieldIds.length; i++) {			if (headFieldIds[i] == 0) {				continue;			}			if (i <= 2) {				View view = findViewById(fieldIds[i]);				if (view instanceof TextView) {					TextView tv = (TextView) view;					tv.setVisibility(View.VISIBLE);					tv.setText(getString(headFieldIds[i]));				}			} else {				View view = findViewById(fieldIds[i]);				if (view instanceof ImageView) {					ImageView iv = (ImageView) view;					iv.setVisibility(View.VISIBLE);					iv.setImageResource(headFieldIds[i]);				}			}		}	}		/**	 * 判断当前是否有网络。	 * */	public boolean isNetworkAvailable() {		ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);		NetworkInfo netInfo = cm.getActiveNetworkInfo();		if (netInfo != null && netInfo.isConnected()) {			// 当前网络是连接的			if (netInfo.getState() == NetworkInfo.State.CONNECTED) {				return true;			}		}		return false;	}	/**	 * 根据返回状态码，返回错误信息，用户在自己项目的string.xml中配置。	 * 	 * @param errorCode	 *            服务	 * */	protected String getErrorInfo(int errorCode) {		try {			int errorObj = this.getResources().getIdentifier(					"error_" + errorCode, "string", this.getPackageName());			if (errorObj != 0) {				return this.getString(errorObj);			}			return "no resource of error code:" + errorCode;		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return "";	}	/**	 * 保存key value	 * 	 * @param key	 *            保存到SharedPreference中标识	 * @param value	 *            待保存的值	 * */	protected void saveDataToLocal(String key, String value) {		SharedPreferences sp = getSharedPreferences("user", MODE_PRIVATE);		sp.edit().putString(key, value).commit();	}	/**	 * 从SharedPreferences中取出指定的值	 * 	 * @param key	 *            待取值的标识	 * @return value	 * */	public String getStringLocalData(String key) {		SharedPreferences sp = getSharedPreferences("user", MODE_PRIVATE);		return sp.getString(key, "");	}	/**	 * 保存key value	 * 	 * @param key	 *            保存到SharedPreference中标识	 * @param value	 *            待保存的值	 * 	 * */	protected void saveDataToLocal(String key, boolean value) {		SharedPreferences sp = getSharedPreferences("user", MODE_PRIVATE);		sp.edit().putBoolean(key, value).commit();	}	/**	 * 从SharedPreferences中取出指定的值	 * 	 * @param key	 *            待取值的标识	 * @return value	 * */	protected boolean getBooleanLocalData(String key) {		SharedPreferences sp = getSharedPreferences("user", MODE_PRIVATE);		return sp.getBoolean(key, false);	}	/**	 * 保存key value	 * 	 * @param key	 *            保存到SharedPreference中标识	 * @param value	 *            待保存的值	 * 	 * */	protected void saveDataToLocal(String key, int value) {		SharedPreferences sp = getSharedPreferences("user", MODE_PRIVATE);		sp.edit().putInt(key, value).commit();	}	/**	 * 从SharedPreferences中取出指定的值	 * 	 * @param key	 *            待取值的标识	 * @return value	 * */	protected int getIntLocalData(String key) {		SharedPreferences sp = getSharedPreferences("user", MODE_PRIVATE);		return sp.getInt(key, 0);	}	/**	 * 无网络时的处理，用户可自定义。	 * 	 * @param message	 *            要显示的信息。	 * */	protected void processNoneNetwork() {		Toast.makeText(this, getString(R.string.info_no_network),				Toast.LENGTH_SHORT).show();	}	/** 	 * 销毁当前activity，通常用于xml中的后退键	 * */	public void goBack(View view){		this.finish();	}	/**获取本地用户对象*/	//TODO	public User getUser(){		return new User();	}	}