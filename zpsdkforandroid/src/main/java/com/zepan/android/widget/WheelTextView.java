package com.zepan.android.widget;import com.zepan.android.sdk.R;import com.zepan.android.widget.CustomPopupWindow;import com.zepan.android.widget.MyAdapter;import com.zepan.android.widget.WheelTextView;import kankan.wheel.widget.OnWheelChangedListener;import kankan.wheel.widget.WheelView;import kankan.wheel.widget.adapters.AbstractWheelTextAdapter;import android.app.Activity;import android.content.Context;import android.content.res.TypedArray;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.ViewGroup;import android.widget.PopupWindow;import android.widget.TextView;/** * 继承自TextView，包含一个普通文本框＋标示箭头＋PopupWindow。<br> * 点击后可从屏幕下方弹出一个wheel，通过wheel选择值后反映到TextView上。<br> * <b>使用方法如下：</b><br> * 1､activity的xml中追加xmlns:app="http://packagename/apk/res/packagename"<br> * 2､在arrays.xml中建一个数组显示wheel中的内容，如<br> * <code> *  &ltstring-array name="wheel_values"><br> *      &ltitem>item1&lt/item><br> *      &ltitem>item2&lt/item><br> *      &ltitem>item3&lt/item><br> *  &lt/string-array><br> * </code> * 3､设置属性：wheelHeight，wheelValues如：<br> * <code>com.zepan.android.widget.WheelTextView *     &ltcom.zepan.android.widget.WheelTextView<br> *       android:id="@+id/wheel"<br> *       android:layout_width="match_parent"<br> *       android:layout_height="48dp"<br> *       app:wheelHeight="200dp"<br> *       app:wheelValues="@array/wheel_values"<br> *      /><br> * </code> * */public class WheelTextView extends TextView {	public static final String TAG = "WheelTextView";	/**	 * 一个字符串数组存储从资源文件中读取的wheel中的值	 * */	private String[] wheelValues;	/**	 * WheelView所在的PopupWindow高度。	 * */	private int windowHeight = 0;	/**	 * PopupWindow供用户选择值	 * */	private PopupWindow window;	/**	 * 屏幕宽度	 * */	private int screenWidth;	/**	 * 标示当前点击还是取消点击。初始值为false，如果点击了设置为true,再点击一次变为false.	 * 决定了wheel是否显示，和TextView后面箭头方向。	 * */	private boolean clickFlag = false;	public WheelTextView(Context context, AttributeSet attrs) {		super(context, attrs);		// 获取屏幕尺寸		if (context instanceof Activity) {			Activity ac = (Activity) context;			DisplayMetrics dm = new DisplayMetrics();			ac.getWindowManager().getDefaultDisplay().getMetrics(dm);			screenWidth = dm.widthPixels;		}		// 读取资源文件		TypedArray a = context.obtainStyledAttributes(attrs,				R.styleable.WheelTextView);		int wheelValueResId = a.getResourceId(				R.styleable.WheelTextView_wheelValues, 0);		wheelValues = getResources().getStringArray(wheelValueResId);		windowHeight = (int) a.getDimension(				R.styleable.WheelTextView_wheelHeight, 100f);		a.recycle();		if (wheelValues == null) {			Log.e(TAG, "未在xml中配置属性：wheelValues");		}		// 设置TextView点击事件		this.setClickable(true);		this.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				//				// 设置点击标识				clickFlag = !clickFlag;				//				// 如果clickFlag为false				//				if (!clickFlag) {				//					// 隐藏PopupWindow				//					if (window != null && window.isShowing()) {				//						window.dismiss();				//					}				//				} else {				//					// 如果PopupWindow为空				//					if (window == null) {				//						// 创建PopupWindow				//						createPopupWindow();				//					}				//					// 显示PopupWindow				//					showPopupWindow();				//				}				if (window == null) {					// 创建PopupWindow					createPopupWindow();				}				// 显示PopupWindow				showPopupWindow();				// 设置TextView样式				updateStyle();			}		});	}	/**	 * 创建PopupWindow，设置样式和点击事件等	 * */	private void createPopupWindow() {		window = new CustomPopupWindow(getContext(), this);		// 设置背景		window.setBackgroundDrawable(getResources().getDrawable(				android.R.color.holo_blue_bright));		// 加载PopupWindow布局文件		View contentView = View.inflate(getContext(), R.layout.wheel_content,				null);		// 填充内容到PopupWindow		window.setContentView(contentView);		// 设置WheelView		loadWheelView(contentView);	}	/**	 * 初始化WheelView。	 * 	 * @param parentView	 *            包含wheelview的布局。	 * @return WheelView	 * */	private WheelView loadWheelView(View parentView) {		// 获取WheelView		final WheelView view = (WheelView) parentView.findViewById(R.id.wheel);		// 设置WheelView中的值		view.setViewAdapter(new MyAdapter(this.getContext(), wheelValues));		// 设置WheelView初始位置		for (int i = 0; i < wheelValues.length; i++) {			if (wheelValues[i].equals(this.getText().toString())) {				view.setCurrentItem(i, true);			}		}		// 设置滚动事件		view.addChangingListener(new OnWheelChangedListener() {			@Override			public void onChanged(WheelView wheel, int oldValue, int newValue) {				if (wheelValues != null && newValue < wheelValues.length) {					WheelTextView.this.setText(wheelValues[newValue]);				}			}		});		return view;	}	/**	 * 在界面中显示PopupWindow	 * */	private void showPopupWindow() {		if (window != null) {			if (getContext() instanceof Activity) {				Activity ac = (Activity) getContext();				window.setWidth(screenWidth);				window.setHeight(windowHeight);				// 设置PopupWindow外部区域是否可触摸				window.setFocusable(true); // 设置PopupWindow可获得焦点				window.setTouchable(true); // 设置PopupWindow可触摸				window.setOutsideTouchable(true); // 设置非PopupWindow区域可触摸				window.setAnimationStyle(R.style.dialogstyle_down_up);				window.showAtLocation(ac.findViewById(android.R.id.content),						Gravity.CENTER | Gravity.BOTTOM, 0, -windowHeight);			}		}	}	/**	 * 设置TextView样式，如指示箭头等	 * */	private void updateStyle() {		this.setSelected(clickFlag);	}}// 自定义WheelViewAdapterclass MyAdapter extends AbstractWheelTextAdapter {	private String[] item;	/**	 * Constructor	 */	public MyAdapter(Context context, String[] item) {		super(context, R.layout.wheel_simple_item, NO_RESOURCE);		setItemTextResource(R.id.item);		this.item = item;	}	@Override	public View getItem(int index, View cachedView, ViewGroup parent) {		View view = super.getItem(index, cachedView, parent);		// ImageView img = (ImageView) view.findViewById(R.id.flag);		// img.setImageResource(flags[index]);		return view;	}	@Override	public int getItemsCount() {		return item.length;	}	@Override	protected CharSequence getItemText(int index) {		return item[index];	}}