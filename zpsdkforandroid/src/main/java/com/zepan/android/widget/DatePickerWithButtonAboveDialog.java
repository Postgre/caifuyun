package com.zepan.android.widget;import android.app.Dialog;import android.content.Context;import android.view.Gravity;import android.view.View;import android.view.ViewGroup;import android.view.Window;import com.zepan.android.sdk.R;import java.util.Calendar;import kankan.wheel.widget.OnWheelChangedListener;import kankan.wheel.widget.WheelView;import kankan.wheel.widget.adapters.ArrayWheelAdapter;/** * 选择日期控件，控件为上下结构。上部分为按钮区域，包含取消和确定；下部分为日期控件。 * @see WheelView * */public class DatePickerWithButtonAboveDialog extends Dialog {	/** 单位 */	private static final String[] UNIT = { "年", "月", "日" };	/** 如果yearInterval，则可选年龄为（现在年份－50，现在年份－1）*/	private int yearInterval = 50;	/** 存储当前年份数据，无单位 */	private int[] yearArray = null;	private DatePickerWithButtonAboveDialog(Context context) {		super(context);		// 去掉标题		this.requestWindowFeature(Window.FEATURE_NO_TITLE);		setContentView(R.layout.dialog_date_picker_with_button_above);		// 获取和显示界面数据		fillDataWithYear();		fillDataWithMonth();		fillDataWithDay(true);		// 事件		findViewById(R.id.tv_cancel).setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				dismiss();			}		});		findViewById(R.id.tv_ok).setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				dismiss();				if(okButtonListener != null){					WheelView yearWheel = (WheelView) findViewById(R.id.id_year);					WheelView monthWheel = (WheelView) findViewById(R.id.id_month);					WheelView dayWheel = (WheelView) findViewById(R.id.id_day);					okButtonListener.onClick(yearArray[yearWheel.getCurrentItem()], monthWheel.getCurrentItem() + 1 ,dayWheel.getCurrentItem() + 1);				}			}		});		}	/**	 * 填充年份区域数据	 * */	private void fillDataWithYear() {		// 获取当前年份		Calendar calendar = Calendar.getInstance();		int year = calendar.get(Calendar.YEAR);		// 循环年份区间，构建年份数据，数组长度根据属性yearInterval确定		String[] yearStringArray = new String[yearInterval];		yearArray = new int[yearInterval];		for (int i = 0; i < yearStringArray.length; i++) {			yearStringArray[i] = (year - yearInterval + i) + UNIT[0];			yearArray[i] = year - yearInterval + i;		}		// 创建年份滚轮适配器并设置到滚轮中		WheelView yearWheel = (WheelView) findViewById(R.id.id_year);		yearWheel.setViewAdapter(new ArrayWheelAdapter<String>(getContext(),				R.layout.item_date_picker_with_button_above,				android.R.id.text1, yearStringArray));		// 设置可见条数//		yearWheel.setVisibleItems(VISIBLE_ITEM_COUNT);		// 默认选中当前年份		yearWheel.setCurrentItem(yearInterval - 1);		// 设置滚动事件		yearWheel.addChangingListener(new OnWheelChangedListener() {			@Override			public void onChanged(WheelView wheel, int oldValue, int newValue) {				updateDayWheel();			}		});	}	/**	 * 填充月份区域数据	 * */	private void fillDataWithMonth() {		// 创建月份数据		String[] monthStringArray = new String[12];		for (int i = 0; i < monthStringArray.length; i++) {			monthStringArray[i] = (i + 1) + UNIT[1];		}		// 创建月份滚轮适配器并设置到滚轮中		WheelView monthWheel = (WheelView) findViewById(R.id.id_month);		monthWheel.setViewAdapter(new ArrayWheelAdapter<String>(getContext(),				R.layout.item_date_picker_with_button_above,				android.R.id.text1, monthStringArray));		// 设置可见条数//		monthWheel.setVisibleItems(VISIBLE_ITEM_COUNT);		// 获取当前月份		Calendar calendar = Calendar.getInstance();		int month = calendar.get(Calendar.MONTH);		// 设置默显示值		monthWheel.setCurrentItem(month);		// 设置滚动事件		monthWheel.addChangingListener(new OnWheelChangedListener() {			@Override			public void onChanged(WheelView wheel, int oldValue, int newValue) {				updateDayWheel();			}		});	}	/**	 * 填充天数区域数据	 * 	 * @param isDefault	 *            如果为true表示显示当前日期，否则不显示	 * */	private void fillDataWithDay(boolean isDefault) {		// 获取指定年、月下的天数		WheelView yearWheel = (WheelView) findViewById(R.id.id_year);		WheelView monthWheel = (WheelView) findViewById(R.id.id_month);		int selectedYear = yearArray[yearWheel.getCurrentItem()];		int selectedMonth = monthWheel.getCurrentItem();		Calendar calendar = Calendar.getInstance();		calendar.set(Calendar.YEAR, selectedYear);		calendar.set(Calendar.MONTH, selectedMonth);		// 创建天数数据，数组长度与年月有关		String[] dayStringArray = new String[calendar				.getActualMaximum(Calendar.DAY_OF_MONTH)];		for (int i = 0; i < dayStringArray.length; i++) {			dayStringArray[i] = (i + 1) + UNIT[2];		}		WheelView dayWheel = (WheelView) findViewById(R.id.id_day);		dayWheel.setViewAdapter(new ArrayWheelAdapter<String>(getContext(),				R.layout.item_date_picker_with_button_above,				android.R.id.text1, dayStringArray));		// 设置可见条数//		dayWheel.setVisibleItems(VISIBLE_ITEM_COUNT);		if (isDefault) {			// 默认选中当前年份			dayWheel.setCurrentItem(calendar.get(Calendar.DAY_OF_MONTH) - 1);		}	}	/** 当年份或月份改变时，日期要做修改，因为有的月份是没有31日的 */	private void updateDayWheel() {		fillDataWithDay(false);		// 获取指定年、月下的天数		WheelView yearWheel = (WheelView) findViewById(R.id.id_year);		WheelView monthWheel = (WheelView) findViewById(R.id.id_month);		int selectedYear = yearArray[yearWheel.getCurrentItem()];		int selectedMonth = monthWheel.getCurrentItem();		Calendar calendar = Calendar.getInstance();		calendar.set(Calendar.YEAR, selectedYear);		calendar.set(Calendar.MONTH, selectedMonth);		// 如果日期滚轮为某日，切换年份或月份后无此日，则日期滚轮选择满足条件的最后一天		WheelView dayWheel = (WheelView) findViewById(R.id.id_day);		int dayCount = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);		if (dayCount < dayWheel.getCurrentItem() + 1) {			dayWheel.setCurrentItem(dayCount - 1);		}	}	/** 单例模式，返回dialog实例 */	private static DatePickerWithButtonAboveDialog dialog;	public static DatePickerWithButtonAboveDialog newInstance(Context context) {		if (dialog == null) {			dialog = new DatePickerWithButtonAboveDialog(context);			// 设置全屏			dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT,					ViewGroup.LayoutParams.WRAP_CONTENT);			// 去掉背景			dialog.getWindow().setBackgroundDrawable(null);			// 设置位置			dialog.getWindow().setGravity(Gravity.BOTTOM);		}		return dialog;	}		/**确定按钮点击事件*/	private OnOkButtonClickListener okButtonListener = null;		public void setOkButtonListener(OnOkButtonClickListener okButtonListener) {		this.okButtonListener = okButtonListener;	}	/**确定按钮点击事件*/	public interface OnOkButtonClickListener{		/**		 * @param year 年		 * @param month 月		 * @param day 天		 * */		public void onClick(int year, int month, int day);	}}